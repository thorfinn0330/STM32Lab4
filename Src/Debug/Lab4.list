
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000060  08003818  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08003818  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf09  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df2  00000000  00000000  0002bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001772f  00000000  00000000  0002ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1da  00000000  00000000  0004617f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881b4  00000000  00000000  00054359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000009ba  00000000  00000000  000dc50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038bc  00000000  00000000  000dcec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e0784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	0800371c 	.word	0x0800371c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	0800371c 	.word	0x0800371c

0800014c <led_1_test>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void led_1_test() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000150:	2120      	movs	r1, #32
 8000152:	4802      	ldr	r0, [pc, #8]	; (800015c <led_1_test+0x10>)
 8000154:	f000 fffa 	bl	800114c <HAL_GPIO_TogglePin>
  }
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	40010800 	.word	0x40010800

08000160 <led_2_test>:
  void led_2_test() {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000164:	2140      	movs	r1, #64	; 0x40
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <led_2_test+0x10>)
 8000168:	f000 fff0 	bl	800114c <HAL_GPIO_TogglePin>
  }
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	40010800 	.word	0x40010800

08000174 <led_3_test>:
  void led_3_test() {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000178:	2180      	movs	r1, #128	; 0x80
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <led_3_test+0x10>)
 800017c:	f000 ffe6 	bl	800114c <HAL_GPIO_TogglePin>
  }
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010800 	.word	0x40010800

08000188 <led_4_test>:
  void led_4_test() {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 800018c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000190:	4802      	ldr	r0, [pc, #8]	; (800019c <led_4_test+0x14>)
 8000192:	f000 ffdb 	bl	800114c <HAL_GPIO_TogglePin>
  }
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <led_5_test>:
  void led_5_test() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 80001a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a8:	4802      	ldr	r0, [pc, #8]	; (80001b4 <led_5_test+0x14>)
 80001aa:	f000 ffcf 	bl	800114c <HAL_GPIO_TogglePin>
  }
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010800 	.word	0x40010800

080001b8 <main>:

int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001bc:	f000 fc10 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c0:	f000 f834 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c4:	f000 f8e4 	bl	8000390 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001c8:	f000 f86c 	bl	80002a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001cc:	f000 f8b6 	bl	800033c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80001d0:	4810      	ldr	r0, [pc, #64]	; (8000214 <main+0x5c>)
 80001d2:	f001 fc35 	bl	8001a40 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 80001d6:	f000 f94b 	bl	8000470 <SCH_Init>
  SCH_Add_Task(led_1_test, 0, 50);
 80001da:	2232      	movs	r2, #50	; 0x32
 80001dc:	2100      	movs	r1, #0
 80001de:	480e      	ldr	r0, [pc, #56]	; (8000218 <main+0x60>)
 80001e0:	f000 f9ce 	bl	8000580 <SCH_Add_Task>
  SCH_Add_Task(led_2_test, 0, 100);
 80001e4:	2264      	movs	r2, #100	; 0x64
 80001e6:	2100      	movs	r1, #0
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <main+0x64>)
 80001ea:	f000 f9c9 	bl	8000580 <SCH_Add_Task>
  SCH_Add_Task(led_3_test, 0, 150);
 80001ee:	2296      	movs	r2, #150	; 0x96
 80001f0:	2100      	movs	r1, #0
 80001f2:	480b      	ldr	r0, [pc, #44]	; (8000220 <main+0x68>)
 80001f4:	f000 f9c4 	bl	8000580 <SCH_Add_Task>
  SCH_Add_Task(led_4_test, 0, 200);
 80001f8:	22c8      	movs	r2, #200	; 0xc8
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <main+0x6c>)
 80001fe:	f000 f9bf 	bl	8000580 <SCH_Add_Task>
  SCH_Add_Task(led_5_test, 250, 0);
 8000202:	2200      	movs	r2, #0
 8000204:	21fa      	movs	r1, #250	; 0xfa
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x70>)
 8000208:	f000 f9ba 	bl	8000580 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 800020c:	f000 fa0a 	bl	8000624 <SCH_Dispatch_Tasks>
 8000210:	e7fc      	b.n	800020c <main+0x54>
 8000212:	bf00      	nop
 8000214:	20000084 	.word	0x20000084
 8000218:	0800014d 	.word	0x0800014d
 800021c:	08000161 	.word	0x08000161
 8000220:	08000175 	.word	0x08000175
 8000224:	08000189 	.word	0x08000189
 8000228:	080001a1 	.word	0x080001a1

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fddc 	bl	8002df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f000 ff8c 	bl	8001180 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026e:	f000 f8f9 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f9fa 	bl	8001684 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000296:	f000 f8e5 	bl	8000464 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c0:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <MX_TIM2_Init+0x94>)
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002c8:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <MX_TIM2_Init+0x94>)
 80002ca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <MX_TIM2_Init+0x94>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002d6:	4b18      	ldr	r3, [pc, #96]	; (8000338 <MX_TIM2_Init+0x94>)
 80002d8:	2209      	movs	r2, #9
 80002da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <MX_TIM2_Init+0x94>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <MX_TIM2_Init+0x94>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e8:	4813      	ldr	r0, [pc, #76]	; (8000338 <MX_TIM2_Init+0x94>)
 80002ea:	f001 fb59 	bl	80019a0 <HAL_TIM_Base_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002f4:	f000 f8b6 	bl	8000464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002fe:	f107 0308 	add.w	r3, r7, #8
 8000302:	4619      	mov	r1, r3
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <MX_TIM2_Init+0x94>)
 8000306:	f001 fcef 	bl	8001ce8 <HAL_TIM_ConfigClockSource>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000310:	f000 f8a8 	bl	8000464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000314:	2300      	movs	r3, #0
 8000316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000318:	2300      	movs	r3, #0
 800031a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031c:	463b      	mov	r3, r7
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_TIM2_Init+0x94>)
 8000322:	f001 febb 	bl	800209c <HAL_TIMEx_MasterConfigSynchronization>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800032c:	f000 f89a 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000084 	.word	0x20000084

0800033c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_USART2_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800034c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_USART2_UART_Init+0x4c>)
 8000374:	f001 fefc 	bl	8002170 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f871 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000cc 	.word	0x200000cc
 800038c:	40004400 	.word	0x40004400

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x60>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <MX_GPIO_Init+0x60>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_GPIO_Init+0x60>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <MX_GPIO_Init+0x64>)
 80003c4:	f000 feaa 	bl	800111c <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80003c8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003cc:	60bb      	str	r3, [r7, #8]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2302      	movs	r3, #2
 80003d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_GPIO_Init+0x64>)
 80003e2:	f000 fd1f 	bl	8000e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010800 	.word	0x40010800

080003f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
char str[20];
int counter = 10;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000408:	d11e      	bne.n	8000448 <HAL_TIM_PeriodElapsedCallback+0x50>

		SCH_Update();
 800040a:	f000 f849 	bl	80004a0 <SCH_Update>
		counter--;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000416:	6013      	str	r3, [r2, #0]
		if(counter <= 0){
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	dc13      	bgt.n	8000448 <HAL_TIM_PeriodElapsedCallback+0x50>
			counter = 10;
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000422:	220a      	movs	r2, #10
 8000424:	601a      	str	r2, [r3, #0]
			uint32_t time = HAL_GetTick();
 8000426:	f000 fb33 	bl	8000a90 <HAL_GetTick>
 800042a:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, str, sprintf(str, "Task %d is execute in %d\r\n", status, time), 5);
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	4909      	ldr	r1, [pc, #36]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000436:	f002 fcbf 	bl	8002db8 <siprintf>
 800043a:	4603      	mov	r3, r0
 800043c:	b29a      	uxth	r2, r3
 800043e:	2305      	movs	r3, #5
 8000440:	4906      	ldr	r1, [pc, #24]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000444:	f001 fee4 	bl	8002210 <HAL_UART_Transmit>
		}

	}
}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000000 	.word	0x20000000
 8000454:	20000080 	.word	0x20000080
 8000458:	08003734 	.word	0x08003734
 800045c:	20000114 	.word	0x20000114
 8000460:	200000cc 	.word	0x200000cc

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <SCH_Init>:
#include "scheduler.h"
#include "global.h"

  sTasks SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
	uint32_t i;
	for (i = 0; i < SCH_MAX_TASKS; i++){
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	e005      	b.n	8000488 <SCH_Init+0x18>
		SCH_Delete_Task(i);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f000 f925 	bl	80006cc <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3301      	adds	r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b27      	cmp	r3, #39	; 0x27
 800048c:	d9f6      	bls.n	800047c <SCH_Init+0xc>
	}
	Error_code_G = 0;
 800048e:	4b03      	ldr	r3, [pc, #12]	; (800049c <SCH_Init+0x2c>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000007c 	.word	0x2000007c

080004a0 <SCH_Update>:

void SCH_Update(void){
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
	uint32_t Index;
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 80004a6:	2300      	movs	r3, #0
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	e05d      	b.n	8000568 <SCH_Update+0xc8>
		if(SCH_tasks_G[Index].pTask){
 80004ac:	4933      	ldr	r1, [pc, #204]	; (800057c <SCH_Update+0xdc>)
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	4613      	mov	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4413      	add	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	440b      	add	r3, r1
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d050      	beq.n	8000562 <SCH_Update+0xc2>
			if(SCH_tasks_G[Index].Delay == 0){
 80004c0:	492e      	ldr	r1, [pc, #184]	; (800057c <SCH_Update+0xdc>)
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	3304      	adds	r3, #4
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d132      	bne.n	800053c <SCH_Update+0x9c>
				SCH_tasks_G[Index].RunMe += 1;
 80004d6:	4929      	ldr	r1, [pc, #164]	; (800057c <SCH_Update+0xdc>)
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	440b      	add	r3, r1
 80004e4:	330c      	adds	r3, #12
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	b2d8      	uxtb	r0, r3
 80004ec:	4923      	ldr	r1, [pc, #140]	; (800057c <SCH_Update+0xdc>)
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	440b      	add	r3, r1
 80004fa:	330c      	adds	r3, #12
 80004fc:	4602      	mov	r2, r0
 80004fe:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[Index].Period){
 8000500:	491e      	ldr	r1, [pc, #120]	; (800057c <SCH_Update+0xdc>)
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	4613      	mov	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	440b      	add	r3, r1
 800050e:	3308      	adds	r3, #8
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d025      	beq.n	8000562 <SCH_Update+0xc2>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000516:	4919      	ldr	r1, [pc, #100]	; (800057c <SCH_Update+0xdc>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	3308      	adds	r3, #8
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	4814      	ldr	r0, [pc, #80]	; (800057c <SCH_Update+0xdc>)
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4403      	add	r3, r0
 8000536:	3304      	adds	r3, #4
 8000538:	6019      	str	r1, [r3, #0]
 800053a:	e012      	b.n	8000562 <SCH_Update+0xc2>
				}
			}
			else{
				SCH_tasks_G[Index].Delay -= 1;
 800053c:	490f      	ldr	r1, [pc, #60]	; (800057c <SCH_Update+0xdc>)
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4613      	mov	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4413      	add	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	440b      	add	r3, r1
 800054a:	3304      	adds	r3, #4
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	1e59      	subs	r1, r3, #1
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <SCH_Update+0xdc>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4403      	add	r3, r0
 800055e:	3304      	adds	r3, #4
 8000560:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b27      	cmp	r3, #39	; 0x27
 800056c:	d99e      	bls.n	80004ac <SCH_Update+0xc>
			}
		}
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000128 	.word	0x20000128

08000580 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000590:	e002      	b.n	8000598 <SCH_Add_Task+0x18>
		Index++;
 8000592:	7dfb      	ldrb	r3, [r7, #23]
 8000594:	3301      	adds	r3, #1
 8000596:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 8000598:	7dfa      	ldrb	r2, [r7, #23]
 800059a:	4920      	ldr	r1, [pc, #128]	; (800061c <SCH_Add_Task+0x9c>)
 800059c:	4613      	mov	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4413      	add	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	440b      	add	r3, r1
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <SCH_Add_Task+0x32>
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	2b27      	cmp	r3, #39	; 0x27
 80005b0:	d9ef      	bls.n	8000592 <SCH_Add_Task+0x12>
	}
	if(Index == SCH_MAX_TASKS){
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	2b28      	cmp	r3, #40	; 0x28
 80005b6:	d104      	bne.n	80005c2 <SCH_Add_Task+0x42>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <SCH_Add_Task+0xa0>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
		return SCH_MAX_TASKS;
 80005be:	2328      	movs	r3, #40	; 0x28
 80005c0:	e027      	b.n	8000612 <SCH_Add_Task+0x92>
	}
	SCH_tasks_G [Index].pTask = pFunction ;
 80005c2:	7dfa      	ldrb	r2, [r7, #23]
 80005c4:	4915      	ldr	r1, [pc, #84]	; (800061c <SCH_Add_Task+0x9c>)
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [Index].Delay = DELAY ;
 80005d4:	7dfa      	ldrb	r2, [r7, #23]
 80005d6:	4911      	ldr	r1, [pc, #68]	; (800061c <SCH_Add_Task+0x9c>)
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3304      	adds	r3, #4
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [Index].Period = PERIOD ;
 80005e8:	7dfa      	ldrb	r2, [r7, #23]
 80005ea:	490c      	ldr	r1, [pc, #48]	; (800061c <SCH_Add_Task+0x9c>)
 80005ec:	4613      	mov	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	440b      	add	r3, r1
 80005f6:	3308      	adds	r3, #8
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [Index].RunMe = 0 ;
 80005fc:	7dfa      	ldrb	r2, [r7, #23]
 80005fe:	4907      	ldr	r1, [pc, #28]	; (800061c <SCH_Add_Task+0x9c>)
 8000600:	4613      	mov	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	440b      	add	r3, r1
 800060a:	330c      	adds	r3, #12
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	return Index;
 8000610:	7dfb      	ldrb	r3, [r7, #23]
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20000128 	.word	0x20000128
 8000620:	2000007c 	.word	0x2000007c

08000624 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	uint32_t Index = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	e03c      	b.n	80006ae <SCH_Dispatch_Tasks+0x8a>
		if(SCH_tasks_G[Index].RunMe > 0){
 8000634:	4923      	ldr	r1, [pc, #140]	; (80006c4 <SCH_Dispatch_Tasks+0xa0>)
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	330c      	adds	r3, #12
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d02e      	beq.n	80006a8 <SCH_Dispatch_Tasks+0x84>
			status = Index;
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <SCH_Dispatch_Tasks+0xa4>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6013      	str	r3, [r2, #0]
			(*SCH_tasks_G[Index].pTask)();
 8000650:	491c      	ldr	r1, [pc, #112]	; (80006c4 <SCH_Dispatch_Tasks+0xa0>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	440b      	add	r3, r1
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1;
 8000662:	4918      	ldr	r1, [pc, #96]	; (80006c4 <SCH_Dispatch_Tasks+0xa0>)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	440b      	add	r3, r1
 8000670:	330c      	adds	r3, #12
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	b2d8      	uxtb	r0, r3
 8000678:	4912      	ldr	r1, [pc, #72]	; (80006c4 <SCH_Dispatch_Tasks+0xa0>)
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	330c      	adds	r3, #12
 8000688:	4602      	mov	r2, r0
 800068a:	701a      	strb	r2, [r3, #0]


			if(SCH_tasks_G[Index].Period == 0){
 800068c:	490d      	ldr	r1, [pc, #52]	; (80006c4 <SCH_Dispatch_Tasks+0xa0>)
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	3308      	adds	r3, #8
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d102      	bne.n	80006a8 <SCH_Dispatch_Tasks+0x84>
				SCH_Delete_Task(Index);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f812 	bl	80006cc <SCH_Delete_Task>
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b27      	cmp	r3, #39	; 0x27
 80006b2:	d9bf      	bls.n	8000634 <SCH_Dispatch_Tasks+0x10>
			}
		}
	}
	SCH_Report_Status();
 80006b4:	f000 f858 	bl	8000768 <SCH_Report_Status>
	SCH_Go_To_Sleep();
 80006b8:	f000 f850 	bl	800075c <SCH_Go_To_Sleep>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000128 	.word	0x20000128
 80006c8:	20000080 	.word	0x20000080

080006cc <SCH_Delete_Task>:

uint8_t SCH_Delete_Task (const uint32_t TASK_INDEX) {
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	uint32_t Return_code ;
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 80006d4:	491f      	ldr	r1, [pc, #124]	; (8000754 <SCH_Delete_Task+0x88>)
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <SCH_Delete_Task+0x28>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <SCH_Delete_Task+0x8c>)
 80006ea:	2203      	movs	r2, #3
 80006ec:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 80006ee:	2304      	movs	r3, #4
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e001      	b.n	80006f8 <SCH_Delete_Task+0x2c>
	} else {
		Return_code = RETURN_NORMAL;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000 ;
 80006f8:	4916      	ldr	r1, [pc, #88]	; (8000754 <SCH_Delete_Task+0x88>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0 ;
 800070a:	4912      	ldr	r1, [pc, #72]	; (8000754 <SCH_Delete_Task+0x88>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	440b      	add	r3, r1
 8000718:	3304      	adds	r3, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0 ;
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <SCH_Delete_Task+0x88>)
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	440b      	add	r3, r1
 800072c:	3308      	adds	r3, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0 ;
 8000732:	4908      	ldr	r1, [pc, #32]	; (8000754 <SCH_Delete_Task+0x88>)
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	330c      	adds	r3, #12
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	return Return_code ;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	b2db      	uxtb	r3, r3
}
 800074a:	4618      	mov	r0, r3
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000128 	.word	0x20000128
 8000758:	2000007c 	.word	0x2000007c

0800075c <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(){
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <SCH_Report_Status>:

void SCH_Report_Status(){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x40>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <HAL_MspInit+0x40>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x40>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x40>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_MspInit+0x40>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x40>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c8:	d113      	bne.n	80007f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_TIM_Base_MspInit+0x44>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_TIM_Base_MspInit+0x44>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_TIM_Base_MspInit+0x44>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	201c      	movs	r0, #28
 80007e8:	f000 fa33 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ec:	201c      	movs	r0, #28
 80007ee:	f000 fa4c 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <HAL_UART_MspInit+0x98>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d137      	bne.n	8000890 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_UART_MspInit+0x9c>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_UART_MspInit+0x9c>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_UART_MspInit+0x9c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x9c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_UART_MspInit+0x9c>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0x9c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000850:	2304      	movs	r3, #4
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <HAL_UART_MspInit+0xa0>)
 8000864:	f000 fade 	bl	8000e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000868:	2308      	movs	r3, #8
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <HAL_UART_MspInit+0xa0>)
 800087c:	f000 fad2 	bl	8000e24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2026      	movs	r0, #38	; 0x26
 8000886:	f000 f9e4 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088a:	2026      	movs	r0, #38	; 0x26
 800088c:	f000 f9fd 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f8bf 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM2_IRQHandler+0x10>)
 80008fa:	f001 f8ed 	bl	8001ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000084 	.word	0x20000084

08000908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <USART2_IRQHandler+0x10>)
 800090e:	f001 fd03 	bl	8002318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000cc 	.word	0x200000cc

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f002 fa5c 	bl	8002e08 <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20002800 	.word	0x20002800
 800097c:	00000400 	.word	0x00000400
 8000980:	20000448 	.word	0x20000448
 8000984:	20000598 	.word	0x20000598

08000988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000994:	f7ff fff8 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800099a:	490c      	ldr	r1, [pc, #48]	; (80009cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b0:	4c09      	ldr	r4, [pc, #36]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f002 fa29 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fbf9 	bl	80001b8 <main>
  bx lr
 80009c6:	4770      	bx	lr
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009d0:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 80009d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009d8:	20000598 	.word	0x20000598

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f923 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff feba 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f93b 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f903 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000004 	.word	0x20000004
 8000a64:	2000000c 	.word	0x2000000c
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_IncTick+0x20>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	2000044c 	.word	0x2000044c

08000a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	2000044c 	.word	0x2000044c

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <__NVIC_EnableIRQ+0x34>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff90 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff2d 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff42 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff90 	bl	8000b94 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5f 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff35 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d008      	beq.n	8000ce8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2204      	movs	r2, #4
 8000cda:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e020      	b.n	8000d2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 020e 	bic.w	r2, r2, #14
 8000cf6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0201 	bic.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d005      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e051      	b.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 020e 	bic.w	r2, r2, #14
 8000d66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0201 	bic.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_DMA_Abort_IT+0xd4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d029      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0xa2>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_DMA_Abort_IT+0xd8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d022      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x9e>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_DMA_Abort_IT+0xdc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01a      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x98>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <HAL_DMA_Abort_IT+0xe0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d012      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x92>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <HAL_DMA_Abort_IT+0xe4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00a      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x8c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <HAL_DMA_Abort_IT+0xe8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d102      	bne.n	8000dba <HAL_DMA_Abort_IT+0x86>
 8000db4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000db8:	e00e      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xa4>
 8000dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dbe:	e00b      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xa4>
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	e008      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xa4>
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	e005      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xa4>
 8000dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd0:	e002      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xa4>
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	e000      	b.n	8000dd8 <HAL_DMA_Abort_IT+0xa4>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <HAL_DMA_Abort_IT+0xec>)
 8000dda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	4798      	blx	r3
    } 
  }
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020008 	.word	0x40020008
 8000e0c:	4002001c 	.word	0x4002001c
 8000e10:	40020030 	.word	0x40020030
 8000e14:	40020044 	.word	0x40020044
 8000e18:	40020058 	.word	0x40020058
 8000e1c:	4002006c 	.word	0x4002006c
 8000e20:	40020000 	.word	0x40020000

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e161      	b.n	80010fc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8150 	bne.w	80010f6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a97      	ldr	r2, [pc, #604]	; (80010b8 <HAL_GPIO_Init+0x294>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d05e      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e60:	4a95      	ldr	r2, [pc, #596]	; (80010b8 <HAL_GPIO_Init+0x294>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d875      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e66:	4a95      	ldr	r2, [pc, #596]	; (80010bc <HAL_GPIO_Init+0x298>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d058      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e6c:	4a93      	ldr	r2, [pc, #588]	; (80010bc <HAL_GPIO_Init+0x298>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d86f      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e72:	4a93      	ldr	r2, [pc, #588]	; (80010c0 <HAL_GPIO_Init+0x29c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d052      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e78:	4a91      	ldr	r2, [pc, #580]	; (80010c0 <HAL_GPIO_Init+0x29c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d869      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e7e:	4a91      	ldr	r2, [pc, #580]	; (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d04c      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e84:	4a8f      	ldr	r2, [pc, #572]	; (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d863      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e8a:	4a8f      	ldr	r2, [pc, #572]	; (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d046      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e90:	4a8d      	ldr	r2, [pc, #564]	; (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d85d      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d82a      	bhi.n	8000ef0 <HAL_GPIO_Init+0xcc>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d859      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HAL_GPIO_Init+0x80>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000ef9 	.word	0x08000ef9
 8000eac:	08000f0b 	.word	0x08000f0b
 8000eb0:	08000f4d 	.word	0x08000f4d
 8000eb4:	08000f53 	.word	0x08000f53
 8000eb8:	08000f53 	.word	0x08000f53
 8000ebc:	08000f53 	.word	0x08000f53
 8000ec0:	08000f53 	.word	0x08000f53
 8000ec4:	08000f53 	.word	0x08000f53
 8000ec8:	08000f53 	.word	0x08000f53
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000f53 	.word	0x08000f53
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f53 	.word	0x08000f53
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f01 	.word	0x08000f01
 8000eec:	08000f15 	.word	0x08000f15
 8000ef0:	4a76      	ldr	r2, [pc, #472]	; (80010cc <HAL_GPIO_Init+0x2a8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef6:	e02c      	b.n	8000f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e029      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	3304      	adds	r3, #4
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e024      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e01f      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e01a      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f26:	2304      	movs	r3, #4
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e013      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d105      	bne.n	8000f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	611a      	str	r2, [r3, #16]
          break;
 8000f3e:	e009      	b.n	8000f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f40:	2308      	movs	r3, #8
 8000f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	615a      	str	r2, [r3, #20]
          break;
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          break;
 8000f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d801      	bhi.n	8000f5e <HAL_GPIO_Init+0x13a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_Init+0x13e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d802      	bhi.n	8000f70 <HAL_GPIO_Init+0x14c>
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x152>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	3b08      	subs	r3, #8
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	6a39      	ldr	r1, [r7, #32]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80a9 	beq.w	80010f6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa4:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a49      	ldr	r2, [pc, #292]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fbc:	4a45      	ldr	r2, [pc, #276]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	; (80010d8 <HAL_GPIO_Init+0x2b4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1e0>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1dc>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1d8>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e004      	b.n	8001006 <HAL_GPIO_Init+0x1e2>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x1e2>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <HAL_GPIO_Init+0x1e2>
 8001004:	2300      	movs	r3, #0
 8001006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001016:	492f      	ldr	r1, [pc, #188]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	492b      	ldr	r1, [pc, #172]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	608b      	str	r3, [r1, #8]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001048:	4013      	ands	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	4921      	ldr	r1, [pc, #132]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	60cb      	str	r3, [r1, #12]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	491d      	ldr	r1, [pc, #116]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001070:	4013      	ands	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4917      	ldr	r1, [pc, #92]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	43db      	mvns	r3, r3
 8001096:	4913      	ldr	r1, [pc, #76]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8001098:	4013      	ands	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	490d      	ldr	r1, [pc, #52]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
 80010b4:	e01f      	b.n	80010f6 <HAL_GPIO_Init+0x2d2>
 80010b6:	bf00      	nop
 80010b8:	10320000 	.word	0x10320000
 80010bc:	10310000 	.word	0x10310000
 80010c0:	10220000 	.word	0x10220000
 80010c4:	10210000 	.word	0x10210000
 80010c8:	10120000 	.word	0x10120000
 80010cc:	10110000 	.word	0x10110000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	40010800 	.word	0x40010800
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	40011000 	.word	0x40011000
 80010e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_Init+0x2f4>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <HAL_GPIO_Init+0x2f4>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f ae96 	bne.w	8000e38 <HAL_GPIO_Init+0x14>
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	372c      	adds	r7, #44	; 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	611a      	str	r2, [r3, #16]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e272      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a0:	4b92      	ldr	r3, [pc, #584]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d00c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ac:	4b8f      	ldr	r3, [pc, #572]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d112      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
 80011b8:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d06c      	beq.n	80012ac <HAL_RCC_OscConfig+0x12c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d168      	bne.n	80012ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e24c      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x76>
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a7f      	ldr	r2, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0xbc>
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a71      	ldr	r2, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6a      	ldr	r2, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a67      	ldr	r2, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc18 	bl	8000a90 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc14 	bl	8000a90 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e200      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xe4>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fc04 	bl	8000a90 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc00 	bl	8000a90 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1ec      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x10c>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d063      	beq.n	8001382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d11c      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e1c0      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4939      	ldr	r1, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fbb9 	bl	8000a90 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fbb5 	bl	8000a90 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1a1      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fb98 	bl	8000a90 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fb94 	bl	8000a90 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e180      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d03a      	beq.n	8001404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d019      	beq.n	80013ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fb78 	bl	8000a90 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fb74 	bl	8000a90 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e160      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 face 	bl	8001964 <RCC_Delay>
 80013c8:	e01c      	b.n	8001404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fb5e 	bl	8000a90 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	e00f      	b.n	80013f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fb5a 	bl	8000a90 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d908      	bls.n	80013f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e146      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	42420000 	.word	0x42420000
 80013f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b92      	ldr	r3, [pc, #584]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e9      	bne.n	80013d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a6 	beq.w	800155e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a87      	ldr	r2, [pc, #540]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b85      	ldr	r3, [pc, #532]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7e      	ldr	r2, [pc, #504]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fb1b 	bl	8000a90 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fb17 	bl	8000a90 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e103      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b75      	ldr	r3, [pc, #468]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x312>
 8001484:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a6e      	ldr	r2, [pc, #440]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	e02d      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x334>
 800149a:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a69      	ldr	r2, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a66      	ldr	r2, [pc, #408]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x356>
 80014bc:	4b61      	ldr	r3, [pc, #388]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a60      	ldr	r2, [pc, #384]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a5d      	ldr	r2, [pc, #372]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a57      	ldr	r2, [pc, #348]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff facb 	bl	8000a90 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fac7 	bl	8000a90 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0b1      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x37e>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fab5 	bl	8000a90 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fab1 	bl	8000a90 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e09b      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8087 	beq.w	8001676 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d061      	beq.n	8001638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d146      	bne.n	800160a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_OscConfig+0x4cc>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fa85 	bl	8000a90 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fa81 	bl	8000a90 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e06d      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4921      	ldr	r1, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a19      	ldr	r1, [r3, #32]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	430b      	orrs	r3, r1
 80015d6:	491b      	ldr	r1, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x4cc>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa55 	bl	8000a90 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fa51 	bl	8000a90 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e03d      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x46a>
 8001608:	e035      	b.n	8001676 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_RCC_OscConfig+0x4cc>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa3e 	bl	8000a90 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa3a 	bl	8000a90 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e026      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x498>
 8001636:	e01e      	b.n	8001676 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e019      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
 8001644:	40021000 	.word	0x40021000
 8001648:	40007000 	.word	0x40007000
 800164c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x500>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	429a      	cmp	r2, r3
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0d0      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d910      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0207 	bic.w	r2, r3, #7
 80016ae:	4965      	ldr	r1, [pc, #404]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0b8      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	494d      	ldr	r1, [pc, #308]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d040      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d115      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e07f      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e073      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06b      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4936      	ldr	r1, [pc, #216]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff f98c 	bl	8000a90 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff f988 	bl	8000a90 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e053      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d210      	bcs.n	80017d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	4922      	ldr	r1, [pc, #136]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e032      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4916      	ldr	r1, [pc, #88]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	490e      	ldr	r1, [pc, #56]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001812:	f000 f821 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 8001816:	4602      	mov	r2, r0
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	5ccb      	ldrb	r3, [r1, r3]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1cc>)
 800182c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1d0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f8ea 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000
 8001848:	40021000 	.word	0x40021000
 800184c:	08003750 	.word	0x08003750
 8001850:	20000004 	.word	0x20000004
 8001854:	20000008 	.word	0x20000008

08001858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b04      	cmp	r3, #4
 8001880:	d002      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x30>
 8001882:	2b08      	cmp	r3, #8
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x36>
 8001886:	e027      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800188a:	613b      	str	r3, [r7, #16]
      break;
 800188c:	e027      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d010      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_GetSysClockFreq+0x94>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0c5b      	lsrs	r3, r3, #17
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	fb03 f202 	mul.w	r2, r3, r2
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e004      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	613b      	str	r3, [r7, #16]
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018da:	613b      	str	r3, [r7, #16]
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	693b      	ldr	r3, [r7, #16]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	007a1200 	.word	0x007a1200
 80018f4:	08003768 	.word	0x08003768
 80018f8:	08003778 	.word	0x08003778
 80018fc:	003d0900 	.word	0x003d0900

08001900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <HAL_RCC_GetHCLKFreq+0x10>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001918:	f7ff fff2 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	08003760 	.word	0x08003760

0800193c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001940:	f7ff ffde 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0adb      	lsrs	r3, r3, #11
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	; (8001960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	08003760 	.word	0x08003760

08001964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <RCC_Delay+0x34>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <RCC_Delay+0x38>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0a5b      	lsrs	r3, r3, #9
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001980:	bf00      	nop
  }
  while (Delay --);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	60fa      	str	r2, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <RCC_Delay+0x1c>
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	20000004 	.word	0x20000004
 800199c:	10624dd3 	.word	0x10624dd3

080019a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e041      	b.n	8001a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fef6 	bl	80007b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3304      	adds	r3, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fa6e 	bl	8001ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d001      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e035      	b.n	8001ac4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_TIM_Base_Start_IT+0x90>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_TIM_Base_Start_IT+0x4e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a82:	d004      	beq.n	8001a8e <HAL_TIM_Base_Start_IT+0x4e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <HAL_TIM_Base_Start_IT+0x94>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d111      	bne.n	8001ab2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d010      	beq.n	8001ac2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab0:	e007      	b.n	8001ac2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40012c00 	.word	0x40012c00
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d122      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d11b      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0202 	mvn.w	r2, #2
 8001b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9b4 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001b20:	e005      	b.n	8001b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f9a7 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f9b6 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d122      	bne.n	8001b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11b      	bne.n	8001b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0204 	mvn.w	r2, #4
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f98a 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f97d 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f98c 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d122      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d11b      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0208 	mvn.w	r2, #8
 8001bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f960 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f953 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f962 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d122      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d11b      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0210 	mvn.w	r2, #16
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2208      	movs	r2, #8
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f936 	bl	8001e88 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f929 	bl	8001e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f938 	bl	8001e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0201 	mvn.w	r2, #1
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fbce 	bl	80003f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d10e      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c74:	2b80      	cmp	r3, #128	; 0x80
 8001c76:	d107      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fa6b 	bl	800215e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8fc 	bl	8001eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d107      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0220 	mvn.w	r2, #32
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa36 	bl	800214c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_TIM_ConfigClockSource+0x1c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0b4      	b.n	8001e6e <HAL_TIM_ConfigClockSource+0x186>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3c:	d03e      	beq.n	8001dbc <HAL_TIM_ConfigClockSource+0xd4>
 8001d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d42:	f200 8087 	bhi.w	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4a:	f000 8086 	beq.w	8001e5a <HAL_TIM_ConfigClockSource+0x172>
 8001d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d52:	d87f      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d54:	2b70      	cmp	r3, #112	; 0x70
 8001d56:	d01a      	beq.n	8001d8e <HAL_TIM_ConfigClockSource+0xa6>
 8001d58:	2b70      	cmp	r3, #112	; 0x70
 8001d5a:	d87b      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d5c:	2b60      	cmp	r3, #96	; 0x60
 8001d5e:	d050      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x11a>
 8001d60:	2b60      	cmp	r3, #96	; 0x60
 8001d62:	d877      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d64:	2b50      	cmp	r3, #80	; 0x50
 8001d66:	d03c      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0xfa>
 8001d68:	2b50      	cmp	r3, #80	; 0x50
 8001d6a:	d873      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d058      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0x13a>
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d86f      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d74:	2b30      	cmp	r3, #48	; 0x30
 8001d76:	d064      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x15a>
 8001d78:	2b30      	cmp	r3, #48	; 0x30
 8001d7a:	d86b      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d060      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x15a>
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d867      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05c      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x15a>
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d05a      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x15a>
 8001d8c:	e062      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d9e:	f000 f95e 	bl	800205e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	609a      	str	r2, [r3, #8]
      break;
 8001dba:	e04f      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dcc:	f000 f947 	bl	800205e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dde:	609a      	str	r2, [r3, #8]
      break;
 8001de0:	e03c      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dee:	461a      	mov	r2, r3
 8001df0:	f000 f8be 	bl	8001f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2150      	movs	r1, #80	; 0x50
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f915 	bl	800202a <TIM_ITRx_SetConfig>
      break;
 8001e00:	e02c      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f000 f8dc 	bl	8001fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2160      	movs	r1, #96	; 0x60
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f905 	bl	800202a <TIM_ITRx_SetConfig>
      break;
 8001e20:	e01c      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f000 f89e 	bl	8001f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2140      	movs	r1, #64	; 0x40
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8f5 	bl	800202a <TIM_ITRx_SetConfig>
      break;
 8001e40:	e00c      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f000 f8ec 	bl	800202a <TIM_ITRx_SetConfig>
      break;
 8001e52:	e003      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
      break;
 8001e58:	e000      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <TIM_Base_SetConfig+0xa8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <TIM_Base_SetConfig+0x28>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ede:	d003      	beq.n	8001ee8 <TIM_Base_SetConfig+0x28>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <TIM_Base_SetConfig+0xac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d108      	bne.n	8001efa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <TIM_Base_SetConfig+0xa8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <TIM_Base_SetConfig+0x52>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f08:	d003      	beq.n	8001f12 <TIM_Base_SetConfig+0x52>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <TIM_Base_SetConfig+0xac>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <TIM_Base_SetConfig+0xa8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d103      	bne.n	8001f58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	615a      	str	r2, [r3, #20]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	40000400 	.word	0x40000400

08001f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f023 0201 	bic.w	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f023 030a 	bic.w	r3, r3, #10
 8001fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	621a      	str	r2, [r3, #32]
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f023 0210 	bic.w	r2, r3, #16
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	031b      	lsls	r3, r3, #12
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002008:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	621a      	str	r2, [r3, #32]
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	f043 0307 	orr.w	r3, r3, #7
 800204c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	609a      	str	r2, [r3, #8]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800205e:	b480      	push	{r7}
 8002060:	b087      	sub	sp, #28
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002078:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	021a      	lsls	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	431a      	orrs	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4313      	orrs	r3, r2
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	609a      	str	r2, [r3, #8]
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e041      	b.n	8002138 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d004      	beq.n	800210c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d10c      	bne.n	8002126 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	4313      	orrs	r3, r2
 800211c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40000400 	.word	0x40000400

0800214c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e042      	b.n	8002208 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fb32 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fd71 	bl	8002c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	d16d      	bne.n	800230c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_UART_Transmit+0x2c>
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e066      	b.n	800230e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2221      	movs	r2, #33	; 0x21
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800224e:	f7fe fc1f 	bl	8000a90 <HAL_GetTick>
 8002252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002268:	d108      	bne.n	800227c <HAL_UART_Transmit+0x6c>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d104      	bne.n	800227c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	e003      	b.n	8002284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002284:	e02a      	b.n	80022dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 faf9 	bl	8002888 <UART_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e036      	b.n	800230e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10b      	bne.n	80022be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	3302      	adds	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	e007      	b.n	80022ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1cf      	bne.n	8002286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2140      	movs	r1, #64	; 0x40
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fac9 	bl	8002888 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e006      	b.n	800230e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800230c:	2302      	movs	r3, #2
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0ba      	sub	sp, #232	; 0xe8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800234a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_UART_IRQHandler+0x66>
 800236a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fbd1 	bl	8002b1e <UART_Receive_IT>
      return;
 800237c:	e25b      	b.n	8002836 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800237e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80de 	beq.w	8002544 <HAL_UART_IRQHandler+0x22c>
 8002388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d106      	bne.n	80023a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002398:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80d1 	beq.w	8002544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_UART_IRQHandler+0xae>
 80023ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_UART_IRQHandler+0xd2>
 80023d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f043 0202 	orr.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_UART_IRQHandler+0xf6>
 80023f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0204 	orr.w	r2, r3, #4
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800240e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d011      	beq.n	800243e <HAL_UART_IRQHandler+0x126>
 800241a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f043 0208 	orr.w	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 81f2 	beq.w	800282c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_UART_IRQHandler+0x14e>
 8002454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb5c 	bl	8002b1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <HAL_UART_IRQHandler+0x17a>
 800248a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04f      	beq.n	8002532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fa66 	bl	8002964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d041      	beq.n	800252a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3314      	adds	r3, #20
 80024ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1d9      	bne.n	80024a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d013      	beq.n	8002522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_UART_IRQHandler+0x3e0>)
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fc14 	bl	8000d34 <HAL_DMA_Abort_IT>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800251c:	4610      	mov	r0, r2
 800251e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	e00e      	b.n	8002540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f99c 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	e00a      	b.n	8002540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f998 	bl	8002860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	e006      	b.n	8002540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f994 	bl	8002860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800253e:	e175      	b.n	800282c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002540:	bf00      	nop
    return;
 8002542:	e173      	b.n	800282c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 814f 	bne.w	80027ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8148 	beq.w	80027ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800255c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8141 	beq.w	80027ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b6 	beq.w	80026fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800259c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8145 	beq.w	8002830 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ae:	429a      	cmp	r2, r3
 80025b0:	f080 813e 	bcs.w	8002830 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	f000 8088 	beq.w	80026d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d6:	e853 3f00 	ldrex	r3, [r3]
 80025da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002600:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800260c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1d9      	bne.n	80025c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3314      	adds	r3, #20
 800261a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261e:	e853 3f00 	ldrex	r3, [r3]
 8002622:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3314      	adds	r3, #20
 8002634:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002638:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800263c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002640:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002644:	e841 2300 	strex	r3, r2, [r1]
 8002648:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800264a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e1      	bne.n	8002614 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3314      	adds	r3, #20
 8002656:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800265a:	e853 3f00 	ldrex	r3, [r3]
 800265e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3314      	adds	r3, #20
 8002670:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002674:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002676:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800267a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800267c:	e841 2300 	strex	r3, r2, [r1]
 8002680:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e3      	bne.n	8002650 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	330c      	adds	r3, #12
 800269c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a8:	f023 0310 	bic.w	r3, r3, #16
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80026bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e3      	bne.n	8002696 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe faf3 	bl	8000cbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8bf 	bl	8002872 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026f4:	e09c      	b.n	8002830 <HAL_UART_IRQHandler+0x518>
 80026f6:	bf00      	nop
 80026f8:	08002a29 	.word	0x08002a29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002704:	b29b      	uxth	r3, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 808e 	beq.w	8002834 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8089 	beq.w	8002834 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	e853 3f00 	ldrex	r3, [r3]
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	330c      	adds	r3, #12
 8002742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002746:	647a      	str	r2, [r7, #68]	; 0x44
 8002748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800274c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e3      	bne.n	8002722 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3314      	adds	r3, #20
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	e853 3f00 	ldrex	r3, [r3]
 8002768:	623b      	str	r3, [r7, #32]
   return(result);
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800277e:	633a      	str	r2, [r7, #48]	; 0x30
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e3      	bne.n	800275a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	e853 3f00 	ldrex	r3, [r3]
 80027ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0310 	bic.w	r3, r3, #16
 80027b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	330c      	adds	r3, #12
 80027c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027c4:	61fa      	str	r2, [r7, #28]
 80027c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	69b9      	ldr	r1, [r7, #24]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	e841 2300 	strex	r3, r2, [r1]
 80027d0:	617b      	str	r3, [r7, #20]
   return(result);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e3      	bne.n	80027a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f844 	bl	8002872 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027ea:	e023      	b.n	8002834 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_UART_IRQHandler+0x4f4>
 80027f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f923 	bl	8002a50 <UART_Transmit_IT>
    return;
 800280a:	e014      	b.n	8002836 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800280c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00e      	beq.n	8002836 <HAL_UART_IRQHandler+0x51e>
 8002818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f962 	bl	8002aee <UART_EndTransmit_IT>
    return;
 800282a:	e004      	b.n	8002836 <HAL_UART_IRQHandler+0x51e>
    return;
 800282c:	bf00      	nop
 800282e:	e002      	b.n	8002836 <HAL_UART_IRQHandler+0x51e>
      return;
 8002830:	bf00      	nop
 8002832:	e000      	b.n	8002836 <HAL_UART_IRQHandler+0x51e>
      return;
 8002834:	bf00      	nop
  }
}
 8002836:	37e8      	adds	r7, #232	; 0xe8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002898:	e050      	b.n	800293c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d04c      	beq.n	800293c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028a8:	f7fe f8f2 	bl	8000a90 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d241      	bcs.n	800293c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	e853 3f00 	ldrex	r3, [r3]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d8:	637a      	str	r2, [r7, #52]	; 0x34
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e5      	bne.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3314      	adds	r3, #20
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	613b      	str	r3, [r7, #16]
   return(result);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290c:	623a      	str	r2, [r7, #32]
 800290e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	69f9      	ldr	r1, [r7, #28]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	61bb      	str	r3, [r7, #24]
   return(result);
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e5      	bne.n	80028ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e00f      	b.n	800295c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d09f      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3740      	adds	r7, #64	; 0x40
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b095      	sub	sp, #84	; 0x54
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800298c:	643a      	str	r2, [r7, #64]	; 0x40
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3314      	adds	r3, #20
 80029a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3314      	adds	r3, #20
 80029be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e5      	bne.n	80029a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d119      	bne.n	8002a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f023 0310 	bic.w	r3, r3, #16
 80029f2:	647b      	str	r3, [r7, #68]	; 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029fc:	61ba      	str	r2, [r7, #24]
 80029fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	613b      	str	r3, [r7, #16]
   return(result);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a1e:	bf00      	nop
 8002a20:	3754      	adds	r7, #84	; 0x54
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff ff0c 	bl	8002860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b21      	cmp	r3, #33	; 0x21
 8002a62:	d13e      	bne.n	8002ae2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d114      	bne.n	8002a98 <UART_Transmit_IT+0x48>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d110      	bne.n	8002a98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	1c9a      	adds	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]
 8002a96:	e008      	b.n	8002aaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	1c59      	adds	r1, r3, #1
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6211      	str	r1, [r2, #32]
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002acc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002adc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fe94 	bl	800283c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08c      	sub	sp, #48	; 0x30
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b22      	cmp	r3, #34	; 0x22
 8002b30:	f040 80ae 	bne.w	8002c90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3c:	d117      	bne.n	8002b6e <UART_Receive_IT+0x50>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	1c9a      	adds	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b6c:	e026      	b.n	8002bbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d007      	beq.n	8002b92 <UART_Receive_IT+0x74>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <UART_Receive_IT+0x82>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e008      	b.n	8002bb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d15d      	bne.n	8002c8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0220 	bic.w	r2, r2, #32
 8002bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d135      	bne.n	8002c82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f023 0310 	bic.w	r3, r3, #16
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	623a      	str	r2, [r7, #32]
 8002c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	69f9      	ldr	r1, [r7, #28]
 8002c42:	6a3a      	ldr	r2, [r7, #32]
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e5      	bne.n	8002c1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d10a      	bne.n	8002c74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fdf9 	bl	8002872 <HAL_UARTEx_RxEventCallback>
 8002c80:	e002      	b.n	8002c88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fde3 	bl	800284e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e002      	b.n	8002c92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3730      	adds	r7, #48	; 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cd6:	f023 030c 	bic.w	r3, r3, #12
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <UART_SetConfig+0x114>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d103      	bne.n	8002d0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7fe fe1a 	bl	800193c <HAL_RCC_GetPCLK2Freq>
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	e002      	b.n	8002d12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f7fe fe02 	bl	8001914 <HAL_RCC_GetPCLK1Freq>
 8002d10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009a      	lsls	r2, r3, #2
 8002d1c:	441a      	add	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <UART_SetConfig+0x118>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	0119      	lsls	r1, r3, #4
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <UART_SetConfig+0x118>)
 8002d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2064      	movs	r0, #100	; 0x64
 8002d52:	fb00 f303 	mul.w	r3, r0, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	3332      	adds	r3, #50	; 0x32
 8002d5c:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <UART_SetConfig+0x118>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d68:	4419      	add	r1, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009a      	lsls	r2, r3, #2
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <UART_SetConfig+0x118>)
 8002d82:	fba3 0302 	umull	r0, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2064      	movs	r0, #100	; 0x64
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	3332      	adds	r3, #50	; 0x32
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <UART_SetConfig+0x118>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	440a      	add	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40013800 	.word	0x40013800
 8002db4:	51eb851f 	.word	0x51eb851f

08002db8 <siprintf>:
 8002db8:	b40e      	push	{r1, r2, r3}
 8002dba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dbe:	b500      	push	{lr}
 8002dc0:	b09c      	sub	sp, #112	; 0x70
 8002dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8002dc4:	9002      	str	r0, [sp, #8]
 8002dc6:	9006      	str	r0, [sp, #24]
 8002dc8:	9107      	str	r1, [sp, #28]
 8002dca:	9104      	str	r1, [sp, #16]
 8002dcc:	4808      	ldr	r0, [pc, #32]	; (8002df0 <siprintf+0x38>)
 8002dce:	4909      	ldr	r1, [pc, #36]	; (8002df4 <siprintf+0x3c>)
 8002dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dd4:	9105      	str	r1, [sp, #20]
 8002dd6:	6800      	ldr	r0, [r0, #0]
 8002dd8:	a902      	add	r1, sp, #8
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	f000 f98e 	bl	80030fc <_svfiprintf_r>
 8002de0:	2200      	movs	r2, #0
 8002de2:	9b02      	ldr	r3, [sp, #8]
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	b01c      	add	sp, #112	; 0x70
 8002de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dec:	b003      	add	sp, #12
 8002dee:	4770      	bx	lr
 8002df0:	2000005c 	.word	0x2000005c
 8002df4:	ffff0208 	.word	0xffff0208

08002df8 <memset>:
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4402      	add	r2, r0
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <memset+0xa>
 8002e00:	4770      	bx	lr
 8002e02:	f803 1b01 	strb.w	r1, [r3], #1
 8002e06:	e7f9      	b.n	8002dfc <memset+0x4>

08002e08 <__errno>:
 8002e08:	4b01      	ldr	r3, [pc, #4]	; (8002e10 <__errno+0x8>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	2000005c 	.word	0x2000005c

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2600      	movs	r6, #0
 8002e18:	4d0c      	ldr	r5, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f000 fc7a 	bl	800371c <_init>
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4d0a      	ldr	r5, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	080037b0 	.word	0x080037b0
 8002e50:	080037b0 	.word	0x080037b0
 8002e54:	080037b0 	.word	0x080037b0
 8002e58:	080037b4 	.word	0x080037b4

08002e5c <__retarget_lock_acquire_recursive>:
 8002e5c:	4770      	bx	lr

08002e5e <__retarget_lock_release_recursive>:
 8002e5e:	4770      	bx	lr

08002e60 <_free_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4605      	mov	r5, r0
 8002e64:	2900      	cmp	r1, #0
 8002e66:	d040      	beq.n	8002eea <_free_r+0x8a>
 8002e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e6c:	1f0c      	subs	r4, r1, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfb8      	it	lt
 8002e72:	18e4      	addlt	r4, r4, r3
 8002e74:	f000 f8dc 	bl	8003030 <__malloc_lock>
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <_free_r+0x8c>)
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	b933      	cbnz	r3, 8002e8c <_free_r+0x2c>
 8002e7e:	6063      	str	r3, [r4, #4]
 8002e80:	6014      	str	r4, [r2, #0]
 8002e82:	4628      	mov	r0, r5
 8002e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e88:	f000 b8d8 	b.w	800303c <__malloc_unlock>
 8002e8c:	42a3      	cmp	r3, r4
 8002e8e:	d908      	bls.n	8002ea2 <_free_r+0x42>
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	1821      	adds	r1, r4, r0
 8002e94:	428b      	cmp	r3, r1
 8002e96:	bf01      	itttt	eq
 8002e98:	6819      	ldreq	r1, [r3, #0]
 8002e9a:	685b      	ldreq	r3, [r3, #4]
 8002e9c:	1809      	addeq	r1, r1, r0
 8002e9e:	6021      	streq	r1, [r4, #0]
 8002ea0:	e7ed      	b.n	8002e7e <_free_r+0x1e>
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	b10b      	cbz	r3, 8002eac <_free_r+0x4c>
 8002ea8:	42a3      	cmp	r3, r4
 8002eaa:	d9fa      	bls.n	8002ea2 <_free_r+0x42>
 8002eac:	6811      	ldr	r1, [r2, #0]
 8002eae:	1850      	adds	r0, r2, r1
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d10b      	bne.n	8002ecc <_free_r+0x6c>
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	4401      	add	r1, r0
 8002eb8:	1850      	adds	r0, r2, r1
 8002eba:	4283      	cmp	r3, r0
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	d1e0      	bne.n	8002e82 <_free_r+0x22>
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4408      	add	r0, r1
 8002ec6:	6010      	str	r0, [r2, #0]
 8002ec8:	6053      	str	r3, [r2, #4]
 8002eca:	e7da      	b.n	8002e82 <_free_r+0x22>
 8002ecc:	d902      	bls.n	8002ed4 <_free_r+0x74>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	e7d6      	b.n	8002e82 <_free_r+0x22>
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	1821      	adds	r1, r4, r0
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	bf01      	itttt	eq
 8002edc:	6819      	ldreq	r1, [r3, #0]
 8002ede:	685b      	ldreq	r3, [r3, #4]
 8002ee0:	1809      	addeq	r1, r1, r0
 8002ee2:	6021      	streq	r1, [r4, #0]
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6054      	str	r4, [r2, #4]
 8002ee8:	e7cb      	b.n	8002e82 <_free_r+0x22>
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	20000590 	.word	0x20000590

08002ef0 <sbrk_aligned>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	4e0e      	ldr	r6, [pc, #56]	; (8002f2c <sbrk_aligned+0x3c>)
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	6831      	ldr	r1, [r6, #0]
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b911      	cbnz	r1, 8002f02 <sbrk_aligned+0x12>
 8002efc:	f000 fbaa 	bl	8003654 <_sbrk_r>
 8002f00:	6030      	str	r0, [r6, #0]
 8002f02:	4621      	mov	r1, r4
 8002f04:	4628      	mov	r0, r5
 8002f06:	f000 fba5 	bl	8003654 <_sbrk_r>
 8002f0a:	1c43      	adds	r3, r0, #1
 8002f0c:	d00a      	beq.n	8002f24 <sbrk_aligned+0x34>
 8002f0e:	1cc4      	adds	r4, r0, #3
 8002f10:	f024 0403 	bic.w	r4, r4, #3
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d007      	beq.n	8002f28 <sbrk_aligned+0x38>
 8002f18:	1a21      	subs	r1, r4, r0
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 fb9a 	bl	8003654 <_sbrk_r>
 8002f20:	3001      	adds	r0, #1
 8002f22:	d101      	bne.n	8002f28 <sbrk_aligned+0x38>
 8002f24:	f04f 34ff 	mov.w	r4, #4294967295
 8002f28:	4620      	mov	r0, r4
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	20000594 	.word	0x20000594

08002f30 <_malloc_r>:
 8002f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f34:	1ccd      	adds	r5, r1, #3
 8002f36:	f025 0503 	bic.w	r5, r5, #3
 8002f3a:	3508      	adds	r5, #8
 8002f3c:	2d0c      	cmp	r5, #12
 8002f3e:	bf38      	it	cc
 8002f40:	250c      	movcc	r5, #12
 8002f42:	2d00      	cmp	r5, #0
 8002f44:	4607      	mov	r7, r0
 8002f46:	db01      	blt.n	8002f4c <_malloc_r+0x1c>
 8002f48:	42a9      	cmp	r1, r5
 8002f4a:	d905      	bls.n	8002f58 <_malloc_r+0x28>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	2600      	movs	r6, #0
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	4630      	mov	r0, r6
 8002f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800302c <_malloc_r+0xfc>
 8002f5c:	f000 f868 	bl	8003030 <__malloc_lock>
 8002f60:	f8d8 3000 	ldr.w	r3, [r8]
 8002f64:	461c      	mov	r4, r3
 8002f66:	bb5c      	cbnz	r4, 8002fc0 <_malloc_r+0x90>
 8002f68:	4629      	mov	r1, r5
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f7ff ffc0 	bl	8002ef0 <sbrk_aligned>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	4604      	mov	r4, r0
 8002f74:	d155      	bne.n	8003022 <_malloc_r+0xf2>
 8002f76:	f8d8 4000 	ldr.w	r4, [r8]
 8002f7a:	4626      	mov	r6, r4
 8002f7c:	2e00      	cmp	r6, #0
 8002f7e:	d145      	bne.n	800300c <_malloc_r+0xdc>
 8002f80:	2c00      	cmp	r4, #0
 8002f82:	d048      	beq.n	8003016 <_malloc_r+0xe6>
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	4631      	mov	r1, r6
 8002f88:	4638      	mov	r0, r7
 8002f8a:	eb04 0903 	add.w	r9, r4, r3
 8002f8e:	f000 fb61 	bl	8003654 <_sbrk_r>
 8002f92:	4581      	cmp	r9, r0
 8002f94:	d13f      	bne.n	8003016 <_malloc_r+0xe6>
 8002f96:	6821      	ldr	r1, [r4, #0]
 8002f98:	4638      	mov	r0, r7
 8002f9a:	1a6d      	subs	r5, r5, r1
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7ff ffa7 	bl	8002ef0 <sbrk_aligned>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d037      	beq.n	8003016 <_malloc_r+0xe6>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	442b      	add	r3, r5
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d038      	beq.n	8003026 <_malloc_r+0xf6>
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	42a2      	cmp	r2, r4
 8002fb8:	d12b      	bne.n	8003012 <_malloc_r+0xe2>
 8002fba:	2200      	movs	r2, #0
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	e00f      	b.n	8002fe0 <_malloc_r+0xb0>
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	1b52      	subs	r2, r2, r5
 8002fc4:	d41f      	bmi.n	8003006 <_malloc_r+0xd6>
 8002fc6:	2a0b      	cmp	r2, #11
 8002fc8:	d917      	bls.n	8002ffa <_malloc_r+0xca>
 8002fca:	1961      	adds	r1, r4, r5
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	6025      	str	r5, [r4, #0]
 8002fd0:	bf18      	it	ne
 8002fd2:	6059      	strne	r1, [r3, #4]
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	bf08      	it	eq
 8002fd8:	f8c8 1000 	streq.w	r1, [r8]
 8002fdc:	5162      	str	r2, [r4, r5]
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	f104 060b 	add.w	r6, r4, #11
 8002fe6:	f000 f829 	bl	800303c <__malloc_unlock>
 8002fea:	f026 0607 	bic.w	r6, r6, #7
 8002fee:	1d23      	adds	r3, r4, #4
 8002ff0:	1af2      	subs	r2, r6, r3
 8002ff2:	d0ae      	beq.n	8002f52 <_malloc_r+0x22>
 8002ff4:	1b9b      	subs	r3, r3, r6
 8002ff6:	50a3      	str	r3, [r4, r2]
 8002ff8:	e7ab      	b.n	8002f52 <_malloc_r+0x22>
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	6862      	ldr	r2, [r4, #4]
 8002ffe:	d1dd      	bne.n	8002fbc <_malloc_r+0x8c>
 8003000:	f8c8 2000 	str.w	r2, [r8]
 8003004:	e7ec      	b.n	8002fe0 <_malloc_r+0xb0>
 8003006:	4623      	mov	r3, r4
 8003008:	6864      	ldr	r4, [r4, #4]
 800300a:	e7ac      	b.n	8002f66 <_malloc_r+0x36>
 800300c:	4634      	mov	r4, r6
 800300e:	6876      	ldr	r6, [r6, #4]
 8003010:	e7b4      	b.n	8002f7c <_malloc_r+0x4c>
 8003012:	4613      	mov	r3, r2
 8003014:	e7cc      	b.n	8002fb0 <_malloc_r+0x80>
 8003016:	230c      	movs	r3, #12
 8003018:	4638      	mov	r0, r7
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	f000 f80e 	bl	800303c <__malloc_unlock>
 8003020:	e797      	b.n	8002f52 <_malloc_r+0x22>
 8003022:	6025      	str	r5, [r4, #0]
 8003024:	e7dc      	b.n	8002fe0 <_malloc_r+0xb0>
 8003026:	605b      	str	r3, [r3, #4]
 8003028:	deff      	udf	#255	; 0xff
 800302a:	bf00      	nop
 800302c:	20000590 	.word	0x20000590

08003030 <__malloc_lock>:
 8003030:	4801      	ldr	r0, [pc, #4]	; (8003038 <__malloc_lock+0x8>)
 8003032:	f7ff bf13 	b.w	8002e5c <__retarget_lock_acquire_recursive>
 8003036:	bf00      	nop
 8003038:	2000058c 	.word	0x2000058c

0800303c <__malloc_unlock>:
 800303c:	4801      	ldr	r0, [pc, #4]	; (8003044 <__malloc_unlock+0x8>)
 800303e:	f7ff bf0e 	b.w	8002e5e <__retarget_lock_release_recursive>
 8003042:	bf00      	nop
 8003044:	2000058c 	.word	0x2000058c

08003048 <__ssputs_r>:
 8003048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	461f      	mov	r7, r3
 800304e:	688e      	ldr	r6, [r1, #8]
 8003050:	4682      	mov	sl, r0
 8003052:	42be      	cmp	r6, r7
 8003054:	460c      	mov	r4, r1
 8003056:	4690      	mov	r8, r2
 8003058:	680b      	ldr	r3, [r1, #0]
 800305a:	d82c      	bhi.n	80030b6 <__ssputs_r+0x6e>
 800305c:	898a      	ldrh	r2, [r1, #12]
 800305e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003062:	d026      	beq.n	80030b2 <__ssputs_r+0x6a>
 8003064:	6965      	ldr	r5, [r4, #20]
 8003066:	6909      	ldr	r1, [r1, #16]
 8003068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800306c:	eba3 0901 	sub.w	r9, r3, r1
 8003070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003074:	1c7b      	adds	r3, r7, #1
 8003076:	444b      	add	r3, r9
 8003078:	106d      	asrs	r5, r5, #1
 800307a:	429d      	cmp	r5, r3
 800307c:	bf38      	it	cc
 800307e:	461d      	movcc	r5, r3
 8003080:	0553      	lsls	r3, r2, #21
 8003082:	d527      	bpl.n	80030d4 <__ssputs_r+0x8c>
 8003084:	4629      	mov	r1, r5
 8003086:	f7ff ff53 	bl	8002f30 <_malloc_r>
 800308a:	4606      	mov	r6, r0
 800308c:	b360      	cbz	r0, 80030e8 <__ssputs_r+0xa0>
 800308e:	464a      	mov	r2, r9
 8003090:	6921      	ldr	r1, [r4, #16]
 8003092:	f000 fafd 	bl	8003690 <memcpy>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	6126      	str	r6, [r4, #16]
 80030a4:	444e      	add	r6, r9
 80030a6:	6026      	str	r6, [r4, #0]
 80030a8:	463e      	mov	r6, r7
 80030aa:	6165      	str	r5, [r4, #20]
 80030ac:	eba5 0509 	sub.w	r5, r5, r9
 80030b0:	60a5      	str	r5, [r4, #8]
 80030b2:	42be      	cmp	r6, r7
 80030b4:	d900      	bls.n	80030b8 <__ssputs_r+0x70>
 80030b6:	463e      	mov	r6, r7
 80030b8:	4632      	mov	r2, r6
 80030ba:	4641      	mov	r1, r8
 80030bc:	6820      	ldr	r0, [r4, #0]
 80030be:	f000 faaf 	bl	8003620 <memmove>
 80030c2:	2000      	movs	r0, #0
 80030c4:	68a3      	ldr	r3, [r4, #8]
 80030c6:	1b9b      	subs	r3, r3, r6
 80030c8:	60a3      	str	r3, [r4, #8]
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	4433      	add	r3, r6
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d4:	462a      	mov	r2, r5
 80030d6:	f000 fae9 	bl	80036ac <_realloc_r>
 80030da:	4606      	mov	r6, r0
 80030dc:	2800      	cmp	r0, #0
 80030de:	d1e0      	bne.n	80030a2 <__ssputs_r+0x5a>
 80030e0:	4650      	mov	r0, sl
 80030e2:	6921      	ldr	r1, [r4, #16]
 80030e4:	f7ff febc 	bl	8002e60 <_free_r>
 80030e8:	230c      	movs	r3, #12
 80030ea:	f8ca 3000 	str.w	r3, [sl]
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	e7e9      	b.n	80030d0 <__ssputs_r+0x88>

080030fc <_svfiprintf_r>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	4698      	mov	r8, r3
 8003102:	898b      	ldrh	r3, [r1, #12]
 8003104:	4607      	mov	r7, r0
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	460d      	mov	r5, r1
 800310a:	4614      	mov	r4, r2
 800310c:	b09d      	sub	sp, #116	; 0x74
 800310e:	d50e      	bpl.n	800312e <_svfiprintf_r+0x32>
 8003110:	690b      	ldr	r3, [r1, #16]
 8003112:	b963      	cbnz	r3, 800312e <_svfiprintf_r+0x32>
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	f7ff ff0b 	bl	8002f30 <_malloc_r>
 800311a:	6028      	str	r0, [r5, #0]
 800311c:	6128      	str	r0, [r5, #16]
 800311e:	b920      	cbnz	r0, 800312a <_svfiprintf_r+0x2e>
 8003120:	230c      	movs	r3, #12
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	e0d0      	b.n	80032cc <_svfiprintf_r+0x1d0>
 800312a:	2340      	movs	r3, #64	; 0x40
 800312c:	616b      	str	r3, [r5, #20]
 800312e:	2300      	movs	r3, #0
 8003130:	9309      	str	r3, [sp, #36]	; 0x24
 8003132:	2320      	movs	r3, #32
 8003134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003138:	2330      	movs	r3, #48	; 0x30
 800313a:	f04f 0901 	mov.w	r9, #1
 800313e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003142:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80032e4 <_svfiprintf_r+0x1e8>
 8003146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800314a:	4623      	mov	r3, r4
 800314c:	469a      	mov	sl, r3
 800314e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003152:	b10a      	cbz	r2, 8003158 <_svfiprintf_r+0x5c>
 8003154:	2a25      	cmp	r2, #37	; 0x25
 8003156:	d1f9      	bne.n	800314c <_svfiprintf_r+0x50>
 8003158:	ebba 0b04 	subs.w	fp, sl, r4
 800315c:	d00b      	beq.n	8003176 <_svfiprintf_r+0x7a>
 800315e:	465b      	mov	r3, fp
 8003160:	4622      	mov	r2, r4
 8003162:	4629      	mov	r1, r5
 8003164:	4638      	mov	r0, r7
 8003166:	f7ff ff6f 	bl	8003048 <__ssputs_r>
 800316a:	3001      	adds	r0, #1
 800316c:	f000 80a9 	beq.w	80032c2 <_svfiprintf_r+0x1c6>
 8003170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003172:	445a      	add	r2, fp
 8003174:	9209      	str	r2, [sp, #36]	; 0x24
 8003176:	f89a 3000 	ldrb.w	r3, [sl]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a1 	beq.w	80032c2 <_svfiprintf_r+0x1c6>
 8003180:	2300      	movs	r3, #0
 8003182:	f04f 32ff 	mov.w	r2, #4294967295
 8003186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800318a:	f10a 0a01 	add.w	sl, sl, #1
 800318e:	9304      	str	r3, [sp, #16]
 8003190:	9307      	str	r3, [sp, #28]
 8003192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003196:	931a      	str	r3, [sp, #104]	; 0x68
 8003198:	4654      	mov	r4, sl
 800319a:	2205      	movs	r2, #5
 800319c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a0:	4850      	ldr	r0, [pc, #320]	; (80032e4 <_svfiprintf_r+0x1e8>)
 80031a2:	f000 fa67 	bl	8003674 <memchr>
 80031a6:	9a04      	ldr	r2, [sp, #16]
 80031a8:	b9d8      	cbnz	r0, 80031e2 <_svfiprintf_r+0xe6>
 80031aa:	06d0      	lsls	r0, r2, #27
 80031ac:	bf44      	itt	mi
 80031ae:	2320      	movmi	r3, #32
 80031b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031b4:	0711      	lsls	r1, r2, #28
 80031b6:	bf44      	itt	mi
 80031b8:	232b      	movmi	r3, #43	; 0x2b
 80031ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031be:	f89a 3000 	ldrb.w	r3, [sl]
 80031c2:	2b2a      	cmp	r3, #42	; 0x2a
 80031c4:	d015      	beq.n	80031f2 <_svfiprintf_r+0xf6>
 80031c6:	4654      	mov	r4, sl
 80031c8:	2000      	movs	r0, #0
 80031ca:	f04f 0c0a 	mov.w	ip, #10
 80031ce:	9a07      	ldr	r2, [sp, #28]
 80031d0:	4621      	mov	r1, r4
 80031d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031d6:	3b30      	subs	r3, #48	; 0x30
 80031d8:	2b09      	cmp	r3, #9
 80031da:	d94d      	bls.n	8003278 <_svfiprintf_r+0x17c>
 80031dc:	b1b0      	cbz	r0, 800320c <_svfiprintf_r+0x110>
 80031de:	9207      	str	r2, [sp, #28]
 80031e0:	e014      	b.n	800320c <_svfiprintf_r+0x110>
 80031e2:	eba0 0308 	sub.w	r3, r0, r8
 80031e6:	fa09 f303 	lsl.w	r3, r9, r3
 80031ea:	4313      	orrs	r3, r2
 80031ec:	46a2      	mov	sl, r4
 80031ee:	9304      	str	r3, [sp, #16]
 80031f0:	e7d2      	b.n	8003198 <_svfiprintf_r+0x9c>
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	1d19      	adds	r1, r3, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	9103      	str	r1, [sp, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bfbb      	ittet	lt
 80031fe:	425b      	neglt	r3, r3
 8003200:	f042 0202 	orrlt.w	r2, r2, #2
 8003204:	9307      	strge	r3, [sp, #28]
 8003206:	9307      	strlt	r3, [sp, #28]
 8003208:	bfb8      	it	lt
 800320a:	9204      	strlt	r2, [sp, #16]
 800320c:	7823      	ldrb	r3, [r4, #0]
 800320e:	2b2e      	cmp	r3, #46	; 0x2e
 8003210:	d10c      	bne.n	800322c <_svfiprintf_r+0x130>
 8003212:	7863      	ldrb	r3, [r4, #1]
 8003214:	2b2a      	cmp	r3, #42	; 0x2a
 8003216:	d134      	bne.n	8003282 <_svfiprintf_r+0x186>
 8003218:	9b03      	ldr	r3, [sp, #12]
 800321a:	3402      	adds	r4, #2
 800321c:	1d1a      	adds	r2, r3, #4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	9203      	str	r2, [sp, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	bfb8      	it	lt
 8003226:	f04f 33ff 	movlt.w	r3, #4294967295
 800322a:	9305      	str	r3, [sp, #20]
 800322c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032e8 <_svfiprintf_r+0x1ec>
 8003230:	2203      	movs	r2, #3
 8003232:	4650      	mov	r0, sl
 8003234:	7821      	ldrb	r1, [r4, #0]
 8003236:	f000 fa1d 	bl	8003674 <memchr>
 800323a:	b138      	cbz	r0, 800324c <_svfiprintf_r+0x150>
 800323c:	2240      	movs	r2, #64	; 0x40
 800323e:	9b04      	ldr	r3, [sp, #16]
 8003240:	eba0 000a 	sub.w	r0, r0, sl
 8003244:	4082      	lsls	r2, r0
 8003246:	4313      	orrs	r3, r2
 8003248:	3401      	adds	r4, #1
 800324a:	9304      	str	r3, [sp, #16]
 800324c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003250:	2206      	movs	r2, #6
 8003252:	4826      	ldr	r0, [pc, #152]	; (80032ec <_svfiprintf_r+0x1f0>)
 8003254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003258:	f000 fa0c 	bl	8003674 <memchr>
 800325c:	2800      	cmp	r0, #0
 800325e:	d038      	beq.n	80032d2 <_svfiprintf_r+0x1d6>
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <_svfiprintf_r+0x1f4>)
 8003262:	bb1b      	cbnz	r3, 80032ac <_svfiprintf_r+0x1b0>
 8003264:	9b03      	ldr	r3, [sp, #12]
 8003266:	3307      	adds	r3, #7
 8003268:	f023 0307 	bic.w	r3, r3, #7
 800326c:	3308      	adds	r3, #8
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003272:	4433      	add	r3, r6
 8003274:	9309      	str	r3, [sp, #36]	; 0x24
 8003276:	e768      	b.n	800314a <_svfiprintf_r+0x4e>
 8003278:	460c      	mov	r4, r1
 800327a:	2001      	movs	r0, #1
 800327c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003280:	e7a6      	b.n	80031d0 <_svfiprintf_r+0xd4>
 8003282:	2300      	movs	r3, #0
 8003284:	f04f 0c0a 	mov.w	ip, #10
 8003288:	4619      	mov	r1, r3
 800328a:	3401      	adds	r4, #1
 800328c:	9305      	str	r3, [sp, #20]
 800328e:	4620      	mov	r0, r4
 8003290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003294:	3a30      	subs	r2, #48	; 0x30
 8003296:	2a09      	cmp	r2, #9
 8003298:	d903      	bls.n	80032a2 <_svfiprintf_r+0x1a6>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0c6      	beq.n	800322c <_svfiprintf_r+0x130>
 800329e:	9105      	str	r1, [sp, #20]
 80032a0:	e7c4      	b.n	800322c <_svfiprintf_r+0x130>
 80032a2:	4604      	mov	r4, r0
 80032a4:	2301      	movs	r3, #1
 80032a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80032aa:	e7f0      	b.n	800328e <_svfiprintf_r+0x192>
 80032ac:	ab03      	add	r3, sp, #12
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	462a      	mov	r2, r5
 80032b2:	4638      	mov	r0, r7
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <_svfiprintf_r+0x1f8>)
 80032b6:	a904      	add	r1, sp, #16
 80032b8:	f3af 8000 	nop.w
 80032bc:	1c42      	adds	r2, r0, #1
 80032be:	4606      	mov	r6, r0
 80032c0:	d1d6      	bne.n	8003270 <_svfiprintf_r+0x174>
 80032c2:	89ab      	ldrh	r3, [r5, #12]
 80032c4:	065b      	lsls	r3, r3, #25
 80032c6:	f53f af2d 	bmi.w	8003124 <_svfiprintf_r+0x28>
 80032ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032cc:	b01d      	add	sp, #116	; 0x74
 80032ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d2:	ab03      	add	r3, sp, #12
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	462a      	mov	r2, r5
 80032d8:	4638      	mov	r0, r7
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <_svfiprintf_r+0x1f8>)
 80032dc:	a904      	add	r1, sp, #16
 80032de:	f000 f87d 	bl	80033dc <_printf_i>
 80032e2:	e7eb      	b.n	80032bc <_svfiprintf_r+0x1c0>
 80032e4:	0800377a 	.word	0x0800377a
 80032e8:	08003780 	.word	0x08003780
 80032ec:	08003784 	.word	0x08003784
 80032f0:	00000000 	.word	0x00000000
 80032f4:	08003049 	.word	0x08003049

080032f8 <_printf_common>:
 80032f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032fc:	4616      	mov	r6, r2
 80032fe:	4699      	mov	r9, r3
 8003300:	688a      	ldr	r2, [r1, #8]
 8003302:	690b      	ldr	r3, [r1, #16]
 8003304:	4607      	mov	r7, r0
 8003306:	4293      	cmp	r3, r2
 8003308:	bfb8      	it	lt
 800330a:	4613      	movlt	r3, r2
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003312:	460c      	mov	r4, r1
 8003314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003318:	b10a      	cbz	r2, 800331e <_printf_common+0x26>
 800331a:	3301      	adds	r3, #1
 800331c:	6033      	str	r3, [r6, #0]
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	0699      	lsls	r1, r3, #26
 8003322:	bf42      	ittt	mi
 8003324:	6833      	ldrmi	r3, [r6, #0]
 8003326:	3302      	addmi	r3, #2
 8003328:	6033      	strmi	r3, [r6, #0]
 800332a:	6825      	ldr	r5, [r4, #0]
 800332c:	f015 0506 	ands.w	r5, r5, #6
 8003330:	d106      	bne.n	8003340 <_printf_common+0x48>
 8003332:	f104 0a19 	add.w	sl, r4, #25
 8003336:	68e3      	ldr	r3, [r4, #12]
 8003338:	6832      	ldr	r2, [r6, #0]
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	42ab      	cmp	r3, r5
 800333e:	dc2b      	bgt.n	8003398 <_printf_common+0xa0>
 8003340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003344:	1e13      	subs	r3, r2, #0
 8003346:	6822      	ldr	r2, [r4, #0]
 8003348:	bf18      	it	ne
 800334a:	2301      	movne	r3, #1
 800334c:	0692      	lsls	r2, r2, #26
 800334e:	d430      	bmi.n	80033b2 <_printf_common+0xba>
 8003350:	4649      	mov	r1, r9
 8003352:	4638      	mov	r0, r7
 8003354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003358:	47c0      	blx	r8
 800335a:	3001      	adds	r0, #1
 800335c:	d023      	beq.n	80033a6 <_printf_common+0xae>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	6922      	ldr	r2, [r4, #16]
 8003362:	f003 0306 	and.w	r3, r3, #6
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf14      	ite	ne
 800336a:	2500      	movne	r5, #0
 800336c:	6833      	ldreq	r3, [r6, #0]
 800336e:	f04f 0600 	mov.w	r6, #0
 8003372:	bf08      	it	eq
 8003374:	68e5      	ldreq	r5, [r4, #12]
 8003376:	f104 041a 	add.w	r4, r4, #26
 800337a:	bf08      	it	eq
 800337c:	1aed      	subeq	r5, r5, r3
 800337e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003382:	bf08      	it	eq
 8003384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003388:	4293      	cmp	r3, r2
 800338a:	bfc4      	itt	gt
 800338c:	1a9b      	subgt	r3, r3, r2
 800338e:	18ed      	addgt	r5, r5, r3
 8003390:	42b5      	cmp	r5, r6
 8003392:	d11a      	bne.n	80033ca <_printf_common+0xd2>
 8003394:	2000      	movs	r0, #0
 8003396:	e008      	b.n	80033aa <_printf_common+0xb2>
 8003398:	2301      	movs	r3, #1
 800339a:	4652      	mov	r2, sl
 800339c:	4649      	mov	r1, r9
 800339e:	4638      	mov	r0, r7
 80033a0:	47c0      	blx	r8
 80033a2:	3001      	adds	r0, #1
 80033a4:	d103      	bne.n	80033ae <_printf_common+0xb6>
 80033a6:	f04f 30ff 	mov.w	r0, #4294967295
 80033aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ae:	3501      	adds	r5, #1
 80033b0:	e7c1      	b.n	8003336 <_printf_common+0x3e>
 80033b2:	2030      	movs	r0, #48	; 0x30
 80033b4:	18e1      	adds	r1, r4, r3
 80033b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033c0:	4422      	add	r2, r4
 80033c2:	3302      	adds	r3, #2
 80033c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033c8:	e7c2      	b.n	8003350 <_printf_common+0x58>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4622      	mov	r2, r4
 80033ce:	4649      	mov	r1, r9
 80033d0:	4638      	mov	r0, r7
 80033d2:	47c0      	blx	r8
 80033d4:	3001      	adds	r0, #1
 80033d6:	d0e6      	beq.n	80033a6 <_printf_common+0xae>
 80033d8:	3601      	adds	r6, #1
 80033da:	e7d9      	b.n	8003390 <_printf_common+0x98>

080033dc <_printf_i>:
 80033dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	7e0f      	ldrb	r7, [r1, #24]
 80033e2:	4691      	mov	r9, r2
 80033e4:	2f78      	cmp	r7, #120	; 0x78
 80033e6:	4680      	mov	r8, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	469a      	mov	sl, r3
 80033ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033f2:	d807      	bhi.n	8003404 <_printf_i+0x28>
 80033f4:	2f62      	cmp	r7, #98	; 0x62
 80033f6:	d80a      	bhi.n	800340e <_printf_i+0x32>
 80033f8:	2f00      	cmp	r7, #0
 80033fa:	f000 80d5 	beq.w	80035a8 <_printf_i+0x1cc>
 80033fe:	2f58      	cmp	r7, #88	; 0x58
 8003400:	f000 80c1 	beq.w	8003586 <_printf_i+0x1aa>
 8003404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800340c:	e03a      	b.n	8003484 <_printf_i+0xa8>
 800340e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003412:	2b15      	cmp	r3, #21
 8003414:	d8f6      	bhi.n	8003404 <_printf_i+0x28>
 8003416:	a101      	add	r1, pc, #4	; (adr r1, 800341c <_printf_i+0x40>)
 8003418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800341c:	08003475 	.word	0x08003475
 8003420:	08003489 	.word	0x08003489
 8003424:	08003405 	.word	0x08003405
 8003428:	08003405 	.word	0x08003405
 800342c:	08003405 	.word	0x08003405
 8003430:	08003405 	.word	0x08003405
 8003434:	08003489 	.word	0x08003489
 8003438:	08003405 	.word	0x08003405
 800343c:	08003405 	.word	0x08003405
 8003440:	08003405 	.word	0x08003405
 8003444:	08003405 	.word	0x08003405
 8003448:	0800358f 	.word	0x0800358f
 800344c:	080034b5 	.word	0x080034b5
 8003450:	08003549 	.word	0x08003549
 8003454:	08003405 	.word	0x08003405
 8003458:	08003405 	.word	0x08003405
 800345c:	080035b1 	.word	0x080035b1
 8003460:	08003405 	.word	0x08003405
 8003464:	080034b5 	.word	0x080034b5
 8003468:	08003405 	.word	0x08003405
 800346c:	08003405 	.word	0x08003405
 8003470:	08003551 	.word	0x08003551
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	602a      	str	r2, [r5, #0]
 800347c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003484:	2301      	movs	r3, #1
 8003486:	e0a0      	b.n	80035ca <_printf_i+0x1ee>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	682b      	ldr	r3, [r5, #0]
 800348c:	0607      	lsls	r7, r0, #24
 800348e:	f103 0104 	add.w	r1, r3, #4
 8003492:	6029      	str	r1, [r5, #0]
 8003494:	d501      	bpl.n	800349a <_printf_i+0xbe>
 8003496:	681e      	ldr	r6, [r3, #0]
 8003498:	e003      	b.n	80034a2 <_printf_i+0xc6>
 800349a:	0646      	lsls	r6, r0, #25
 800349c:	d5fb      	bpl.n	8003496 <_printf_i+0xba>
 800349e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034a2:	2e00      	cmp	r6, #0
 80034a4:	da03      	bge.n	80034ae <_printf_i+0xd2>
 80034a6:	232d      	movs	r3, #45	; 0x2d
 80034a8:	4276      	negs	r6, r6
 80034aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ae:	230a      	movs	r3, #10
 80034b0:	4859      	ldr	r0, [pc, #356]	; (8003618 <_printf_i+0x23c>)
 80034b2:	e012      	b.n	80034da <_printf_i+0xfe>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	1d19      	adds	r1, r3, #4
 80034ba:	6029      	str	r1, [r5, #0]
 80034bc:	0605      	lsls	r5, r0, #24
 80034be:	d501      	bpl.n	80034c4 <_printf_i+0xe8>
 80034c0:	681e      	ldr	r6, [r3, #0]
 80034c2:	e002      	b.n	80034ca <_printf_i+0xee>
 80034c4:	0641      	lsls	r1, r0, #25
 80034c6:	d5fb      	bpl.n	80034c0 <_printf_i+0xe4>
 80034c8:	881e      	ldrh	r6, [r3, #0]
 80034ca:	2f6f      	cmp	r7, #111	; 0x6f
 80034cc:	bf0c      	ite	eq
 80034ce:	2308      	moveq	r3, #8
 80034d0:	230a      	movne	r3, #10
 80034d2:	4851      	ldr	r0, [pc, #324]	; (8003618 <_printf_i+0x23c>)
 80034d4:	2100      	movs	r1, #0
 80034d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034da:	6865      	ldr	r5, [r4, #4]
 80034dc:	2d00      	cmp	r5, #0
 80034de:	bfa8      	it	ge
 80034e0:	6821      	ldrge	r1, [r4, #0]
 80034e2:	60a5      	str	r5, [r4, #8]
 80034e4:	bfa4      	itt	ge
 80034e6:	f021 0104 	bicge.w	r1, r1, #4
 80034ea:	6021      	strge	r1, [r4, #0]
 80034ec:	b90e      	cbnz	r6, 80034f2 <_printf_i+0x116>
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	d04b      	beq.n	800358a <_printf_i+0x1ae>
 80034f2:	4615      	mov	r5, r2
 80034f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80034f8:	fb03 6711 	mls	r7, r3, r1, r6
 80034fc:	5dc7      	ldrb	r7, [r0, r7]
 80034fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003502:	4637      	mov	r7, r6
 8003504:	42bb      	cmp	r3, r7
 8003506:	460e      	mov	r6, r1
 8003508:	d9f4      	bls.n	80034f4 <_printf_i+0x118>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d10b      	bne.n	8003526 <_printf_i+0x14a>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	07de      	lsls	r6, r3, #31
 8003512:	d508      	bpl.n	8003526 <_printf_i+0x14a>
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	6861      	ldr	r1, [r4, #4]
 8003518:	4299      	cmp	r1, r3
 800351a:	bfde      	ittt	le
 800351c:	2330      	movle	r3, #48	; 0x30
 800351e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003526:	1b52      	subs	r2, r2, r5
 8003528:	6122      	str	r2, [r4, #16]
 800352a:	464b      	mov	r3, r9
 800352c:	4621      	mov	r1, r4
 800352e:	4640      	mov	r0, r8
 8003530:	f8cd a000 	str.w	sl, [sp]
 8003534:	aa03      	add	r2, sp, #12
 8003536:	f7ff fedf 	bl	80032f8 <_printf_common>
 800353a:	3001      	adds	r0, #1
 800353c:	d14a      	bne.n	80035d4 <_printf_i+0x1f8>
 800353e:	f04f 30ff 	mov.w	r0, #4294967295
 8003542:	b004      	add	sp, #16
 8003544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	2778      	movs	r7, #120	; 0x78
 8003552:	4832      	ldr	r0, [pc, #200]	; (800361c <_printf_i+0x240>)
 8003554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	6829      	ldr	r1, [r5, #0]
 800355c:	061f      	lsls	r7, r3, #24
 800355e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003562:	d402      	bmi.n	800356a <_printf_i+0x18e>
 8003564:	065f      	lsls	r7, r3, #25
 8003566:	bf48      	it	mi
 8003568:	b2b6      	uxthmi	r6, r6
 800356a:	07df      	lsls	r7, r3, #31
 800356c:	bf48      	it	mi
 800356e:	f043 0320 	orrmi.w	r3, r3, #32
 8003572:	6029      	str	r1, [r5, #0]
 8003574:	bf48      	it	mi
 8003576:	6023      	strmi	r3, [r4, #0]
 8003578:	b91e      	cbnz	r6, 8003582 <_printf_i+0x1a6>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	f023 0320 	bic.w	r3, r3, #32
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	2310      	movs	r3, #16
 8003584:	e7a6      	b.n	80034d4 <_printf_i+0xf8>
 8003586:	4824      	ldr	r0, [pc, #144]	; (8003618 <_printf_i+0x23c>)
 8003588:	e7e4      	b.n	8003554 <_printf_i+0x178>
 800358a:	4615      	mov	r5, r2
 800358c:	e7bd      	b.n	800350a <_printf_i+0x12e>
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	6826      	ldr	r6, [r4, #0]
 8003592:	1d18      	adds	r0, r3, #4
 8003594:	6961      	ldr	r1, [r4, #20]
 8003596:	6028      	str	r0, [r5, #0]
 8003598:	0635      	lsls	r5, r6, #24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	d501      	bpl.n	80035a2 <_printf_i+0x1c6>
 800359e:	6019      	str	r1, [r3, #0]
 80035a0:	e002      	b.n	80035a8 <_printf_i+0x1cc>
 80035a2:	0670      	lsls	r0, r6, #25
 80035a4:	d5fb      	bpl.n	800359e <_printf_i+0x1c2>
 80035a6:	8019      	strh	r1, [r3, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	4615      	mov	r5, r2
 80035ac:	6123      	str	r3, [r4, #16]
 80035ae:	e7bc      	b.n	800352a <_printf_i+0x14e>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	1d1a      	adds	r2, r3, #4
 80035b6:	602a      	str	r2, [r5, #0]
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 f859 	bl	8003674 <memchr>
 80035c2:	b108      	cbz	r0, 80035c8 <_printf_i+0x1ec>
 80035c4:	1b40      	subs	r0, r0, r5
 80035c6:	6060      	str	r0, [r4, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	2300      	movs	r3, #0
 80035ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d2:	e7aa      	b.n	800352a <_printf_i+0x14e>
 80035d4:	462a      	mov	r2, r5
 80035d6:	4649      	mov	r1, r9
 80035d8:	4640      	mov	r0, r8
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	47d0      	blx	sl
 80035de:	3001      	adds	r0, #1
 80035e0:	d0ad      	beq.n	800353e <_printf_i+0x162>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	079b      	lsls	r3, r3, #30
 80035e6:	d413      	bmi.n	8003610 <_printf_i+0x234>
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	4298      	cmp	r0, r3
 80035ee:	bfb8      	it	lt
 80035f0:	4618      	movlt	r0, r3
 80035f2:	e7a6      	b.n	8003542 <_printf_i+0x166>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4632      	mov	r2, r6
 80035f8:	4649      	mov	r1, r9
 80035fa:	4640      	mov	r0, r8
 80035fc:	47d0      	blx	sl
 80035fe:	3001      	adds	r0, #1
 8003600:	d09d      	beq.n	800353e <_printf_i+0x162>
 8003602:	3501      	adds	r5, #1
 8003604:	68e3      	ldr	r3, [r4, #12]
 8003606:	9903      	ldr	r1, [sp, #12]
 8003608:	1a5b      	subs	r3, r3, r1
 800360a:	42ab      	cmp	r3, r5
 800360c:	dcf2      	bgt.n	80035f4 <_printf_i+0x218>
 800360e:	e7eb      	b.n	80035e8 <_printf_i+0x20c>
 8003610:	2500      	movs	r5, #0
 8003612:	f104 0619 	add.w	r6, r4, #25
 8003616:	e7f5      	b.n	8003604 <_printf_i+0x228>
 8003618:	0800378b 	.word	0x0800378b
 800361c:	0800379c 	.word	0x0800379c

08003620 <memmove>:
 8003620:	4288      	cmp	r0, r1
 8003622:	b510      	push	{r4, lr}
 8003624:	eb01 0402 	add.w	r4, r1, r2
 8003628:	d902      	bls.n	8003630 <memmove+0x10>
 800362a:	4284      	cmp	r4, r0
 800362c:	4623      	mov	r3, r4
 800362e:	d807      	bhi.n	8003640 <memmove+0x20>
 8003630:	1e43      	subs	r3, r0, #1
 8003632:	42a1      	cmp	r1, r4
 8003634:	d008      	beq.n	8003648 <memmove+0x28>
 8003636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800363a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800363e:	e7f8      	b.n	8003632 <memmove+0x12>
 8003640:	4601      	mov	r1, r0
 8003642:	4402      	add	r2, r0
 8003644:	428a      	cmp	r2, r1
 8003646:	d100      	bne.n	800364a <memmove+0x2a>
 8003648:	bd10      	pop	{r4, pc}
 800364a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800364e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003652:	e7f7      	b.n	8003644 <memmove+0x24>

08003654 <_sbrk_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	2300      	movs	r3, #0
 8003658:	4d05      	ldr	r5, [pc, #20]	; (8003670 <_sbrk_r+0x1c>)
 800365a:	4604      	mov	r4, r0
 800365c:	4608      	mov	r0, r1
 800365e:	602b      	str	r3, [r5, #0]
 8003660:	f7fd f95c 	bl	800091c <_sbrk>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_sbrk_r+0x1a>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_sbrk_r+0x1a>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000588 	.word	0x20000588

08003674 <memchr>:
 8003674:	4603      	mov	r3, r0
 8003676:	b510      	push	{r4, lr}
 8003678:	b2c9      	uxtb	r1, r1
 800367a:	4402      	add	r2, r0
 800367c:	4293      	cmp	r3, r2
 800367e:	4618      	mov	r0, r3
 8003680:	d101      	bne.n	8003686 <memchr+0x12>
 8003682:	2000      	movs	r0, #0
 8003684:	e003      	b.n	800368e <memchr+0x1a>
 8003686:	7804      	ldrb	r4, [r0, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	428c      	cmp	r4, r1
 800368c:	d1f6      	bne.n	800367c <memchr+0x8>
 800368e:	bd10      	pop	{r4, pc}

08003690 <memcpy>:
 8003690:	440a      	add	r2, r1
 8003692:	4291      	cmp	r1, r2
 8003694:	f100 33ff 	add.w	r3, r0, #4294967295
 8003698:	d100      	bne.n	800369c <memcpy+0xc>
 800369a:	4770      	bx	lr
 800369c:	b510      	push	{r4, lr}
 800369e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036a2:	4291      	cmp	r1, r2
 80036a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036a8:	d1f9      	bne.n	800369e <memcpy+0xe>
 80036aa:	bd10      	pop	{r4, pc}

080036ac <_realloc_r>:
 80036ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b0:	4680      	mov	r8, r0
 80036b2:	4614      	mov	r4, r2
 80036b4:	460e      	mov	r6, r1
 80036b6:	b921      	cbnz	r1, 80036c2 <_realloc_r+0x16>
 80036b8:	4611      	mov	r1, r2
 80036ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036be:	f7ff bc37 	b.w	8002f30 <_malloc_r>
 80036c2:	b92a      	cbnz	r2, 80036d0 <_realloc_r+0x24>
 80036c4:	f7ff fbcc 	bl	8002e60 <_free_r>
 80036c8:	4625      	mov	r5, r4
 80036ca:	4628      	mov	r0, r5
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d0:	f000 f81b 	bl	800370a <_malloc_usable_size_r>
 80036d4:	4284      	cmp	r4, r0
 80036d6:	4607      	mov	r7, r0
 80036d8:	d802      	bhi.n	80036e0 <_realloc_r+0x34>
 80036da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036de:	d812      	bhi.n	8003706 <_realloc_r+0x5a>
 80036e0:	4621      	mov	r1, r4
 80036e2:	4640      	mov	r0, r8
 80036e4:	f7ff fc24 	bl	8002f30 <_malloc_r>
 80036e8:	4605      	mov	r5, r0
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d0ed      	beq.n	80036ca <_realloc_r+0x1e>
 80036ee:	42bc      	cmp	r4, r7
 80036f0:	4622      	mov	r2, r4
 80036f2:	4631      	mov	r1, r6
 80036f4:	bf28      	it	cs
 80036f6:	463a      	movcs	r2, r7
 80036f8:	f7ff ffca 	bl	8003690 <memcpy>
 80036fc:	4631      	mov	r1, r6
 80036fe:	4640      	mov	r0, r8
 8003700:	f7ff fbae 	bl	8002e60 <_free_r>
 8003704:	e7e1      	b.n	80036ca <_realloc_r+0x1e>
 8003706:	4635      	mov	r5, r6
 8003708:	e7df      	b.n	80036ca <_realloc_r+0x1e>

0800370a <_malloc_usable_size_r>:
 800370a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800370e:	1f18      	subs	r0, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	bfbc      	itt	lt
 8003714:	580b      	ldrlt	r3, [r1, r0]
 8003716:	18c0      	addlt	r0, r0, r3
 8003718:	4770      	bx	lr
	...

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
